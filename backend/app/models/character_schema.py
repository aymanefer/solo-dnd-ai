# generated by datamodel-codegen:
#   filename:  character.schema.json
#   timestamp: 2025-09-17T01:21:42+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Optional

from pydantic import BaseModel, Field, conint


class Class(Enum):
    Barbarian = "Barbarian"
    Bard = "Bard"
    Cleric = "Cleric"
    Druid = "Druid"
    Fighter = "Fighter"
    Monk = "Monk"
    Paladin = "Paladin"
    Ranger = "Ranger"
    Rogue = "Rogue"
    Sorcerer = "Sorcerer"
    Warlock = "Warlock"
    Wizard = "Wizard"


class Race(Enum):
    Human = "Human"
    Elf = "Elf"
    Dwarf = "Dwarf"
    Halfling = "Halfling"
    Dragonborn = "Dragonborn"
    Gnome = "Gnome"
    Half_Elf = "Half-Elf"
    Half_Orc = "Half-Orc"
    Tiefling = "Tiefling"


class Abilities(BaseModel):
    str: int
    dex: int
    con: int
    int: int
    wis: int
    cha: int


class Proficiencies(BaseModel):
    skills: Optional[list[str]] = None
    saves: Optional[list[str]] = None
    weapons: Optional[list[str]] = None
    armor: Optional[list[str]] = None
    tools: Optional[list[str]] = None


class Hp(BaseModel):
    current: conint(ge=0)
    max: conint(ge=1)
    temp: Optional[conint(ge=0)] = None


class Condition(Enum):
    Blinded = "Blinded"
    Charmed = "Charmed"
    Deafened = "Deafened"
    Frightened = "Frightened"
    Grappled = "Grappled"
    Incapacitated = "Incapacitated"
    Invisible = "Invisible"
    Paralyzed = "Paralyzed"
    Petrified = "Petrified"
    Poisoned = "Poisoned"
    Prone = "Prone"
    Restrained = "Restrained"
    Stunned = "Stunned"
    Unconscious = "Unconscious"
    Exhaustion = "Exhaustion"


class Persona(BaseModel):
    voice: Optional[str] = None
    goals: Optional[list[str]] = None
    tactics: Optional[str] = None


class Character(BaseModel):
    id: str = Field(..., description="Unique character ID")
    name: str
    level: conint(ge=1)
    class_: Class = Field(..., alias="class")
    race: Race
    alignment: Optional[str] = None
    abilities: Abilities
    proficiencies: Optional[Proficiencies] = None
    ac: conint(ge=1)
    hp: Hp
    speed: conint(ge=0)
    inventory: Optional[list[dict[str, Any]]] = None
    spells: Optional[list[dict[str, Any]]] = None
    features: Optional[list[str]] = None
    conditions: Optional[list[Condition]] = None
    resources: Optional[dict[str, int]] = None
    persona: Optional[Persona] = None
